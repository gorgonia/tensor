//go:build !purego
// +build !purego

package native

// Code generated by genlib2. DO NOT EDIT.

import (
	_ "unsafe"

	"gorgonia.org/tensor"
)

//go:linkname  VectorB gorgonia.org/tensor.nativeDenseVectorB

// VectorB converts a *Dense into a []bool
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorB(t *tensor.Dense) (retVal []bool, err error)

//go:linkname MatrixB gorgonia.org/tensor.nativeDenseMatrixB

// MatrixB converts a  *Dense into a [][]bool
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixB(t *tensor.Dense) (retVal [][]bool, err error)

//go:linkname Tensor3B gorgonia.org/tensor.nativeDenseTensor3B

// Tensor3B converts a *Dense into a  [][][]bool.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3B(t *tensor.Dense) (retVal [][][]bool, err error)

//go:linkname  VectorI gorgonia.org/tensor.nativeDenseVectorI

// VectorI converts a *Dense into a []int
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorI(t *tensor.Dense) (retVal []int, err error)

//go:linkname MatrixI gorgonia.org/tensor.nativeDenseMatrixI

// MatrixI converts a  *Dense into a [][]int
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixI(t *tensor.Dense) (retVal [][]int, err error)

//go:linkname Tensor3I gorgonia.org/tensor.nativeDenseTensor3I

// Tensor3I converts a *Dense into a  [][][]int.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3I(t *tensor.Dense) (retVal [][][]int, err error)

//go:linkname  VectorI8 gorgonia.org/tensor.nativeDenseVectorI8

// VectorI8 converts a *Dense into a []int8
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorI8(t *tensor.Dense) (retVal []int8, err error)

//go:linkname MatrixI8 gorgonia.org/tensor.nativeDenseMatrixI8

// MatrixI8 converts a  *Dense into a [][]int8
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixI8(t *tensor.Dense) (retVal [][]int8, err error)

//go:linkname Tensor3I8 gorgonia.org/tensor.nativeDenseTensor3I8

// Tensor3I8 converts a *Dense into a  [][][]int8.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3I8(t *tensor.Dense) (retVal [][][]int8, err error)

//go:linkname  VectorI16 gorgonia.org/tensor.nativeDenseVectorI16

// VectorI16 converts a *Dense into a []int16
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorI16(t *tensor.Dense) (retVal []int16, err error)

//go:linkname MatrixI16 gorgonia.org/tensor.nativeDenseMatrixI16

// MatrixI16 converts a  *Dense into a [][]int16
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixI16(t *tensor.Dense) (retVal [][]int16, err error)

//go:linkname Tensor3I16 gorgonia.org/tensor.nativeDenseTensor3I16

// Tensor3I16 converts a *Dense into a  [][][]int16.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3I16(t *tensor.Dense) (retVal [][][]int16, err error)

//go:linkname  VectorI32 gorgonia.org/tensor.nativeDenseVectorI32

// VectorI32 converts a *Dense into a []int32
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorI32(t *tensor.Dense) (retVal []int32, err error)

//go:linkname MatrixI32 gorgonia.org/tensor.nativeDenseMatrixI32

// MatrixI32 converts a  *Dense into a [][]int32
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixI32(t *tensor.Dense) (retVal [][]int32, err error)

//go:linkname Tensor3I32 gorgonia.org/tensor.nativeDenseTensor3I32

// Tensor3I32 converts a *Dense into a  [][][]int32.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3I32(t *tensor.Dense) (retVal [][][]int32, err error)

//go:linkname  VectorI64 gorgonia.org/tensor.nativeDenseVectorI64

// VectorI64 converts a *Dense into a []int64
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorI64(t *tensor.Dense) (retVal []int64, err error)

//go:linkname MatrixI64 gorgonia.org/tensor.nativeDenseMatrixI64

// MatrixI64 converts a  *Dense into a [][]int64
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixI64(t *tensor.Dense) (retVal [][]int64, err error)

//go:linkname Tensor3I64 gorgonia.org/tensor.nativeDenseTensor3I64

// Tensor3I64 converts a *Dense into a  [][][]int64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3I64(t *tensor.Dense) (retVal [][][]int64, err error)

//go:linkname  VectorU gorgonia.org/tensor.nativeDenseVectorU

// VectorU converts a *Dense into a []uint
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorU(t *tensor.Dense) (retVal []uint, err error)

//go:linkname MatrixU gorgonia.org/tensor.nativeDenseMatrixU

// MatrixU converts a  *Dense into a [][]uint
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixU(t *tensor.Dense) (retVal [][]uint, err error)

//go:linkname Tensor3U gorgonia.org/tensor.nativeDenseTensor3U

// Tensor3U converts a *Dense into a  [][][]uint.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3U(t *tensor.Dense) (retVal [][][]uint, err error)

//go:linkname  VectorU8 gorgonia.org/tensor.nativeDenseVectorU8

// VectorU8 converts a *Dense into a []uint8
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorU8(t *tensor.Dense) (retVal []uint8, err error)

//go:linkname MatrixU8 gorgonia.org/tensor.nativeDenseMatrixU8

// MatrixU8 converts a  *Dense into a [][]uint8
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixU8(t *tensor.Dense) (retVal [][]uint8, err error)

//go:linkname Tensor3U8 gorgonia.org/tensor.nativeDenseTensor3U8

// Tensor3U8 converts a *Dense into a  [][][]uint8.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3U8(t *tensor.Dense) (retVal [][][]uint8, err error)

//go:linkname  VectorU16 gorgonia.org/tensor.nativeDenseVectorU16

// VectorU16 converts a *Dense into a []uint16
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorU16(t *tensor.Dense) (retVal []uint16, err error)

//go:linkname MatrixU16 gorgonia.org/tensor.nativeDenseMatrixU16

// MatrixU16 converts a  *Dense into a [][]uint16
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixU16(t *tensor.Dense) (retVal [][]uint16, err error)

//go:linkname Tensor3U16 gorgonia.org/tensor.nativeDenseTensor3U16

// Tensor3U16 converts a *Dense into a  [][][]uint16.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3U16(t *tensor.Dense) (retVal [][][]uint16, err error)

//go:linkname  VectorU32 gorgonia.org/tensor.nativeDenseVectorU32

// VectorU32 converts a *Dense into a []uint32
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorU32(t *tensor.Dense) (retVal []uint32, err error)

//go:linkname MatrixU32 gorgonia.org/tensor.nativeDenseMatrixU32

// MatrixU32 converts a  *Dense into a [][]uint32
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixU32(t *tensor.Dense) (retVal [][]uint32, err error)

//go:linkname Tensor3U32 gorgonia.org/tensor.nativeDenseTensor3U32

// Tensor3U32 converts a *Dense into a  [][][]uint32.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3U32(t *tensor.Dense) (retVal [][][]uint32, err error)

//go:linkname  VectorU64 gorgonia.org/tensor.nativeDenseVectorU64

// VectorU64 converts a *Dense into a []uint64
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorU64(t *tensor.Dense) (retVal []uint64, err error)

//go:linkname MatrixU64 gorgonia.org/tensor.nativeDenseMatrixU64

// MatrixU64 converts a  *Dense into a [][]uint64
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixU64(t *tensor.Dense) (retVal [][]uint64, err error)

//go:linkname Tensor3U64 gorgonia.org/tensor.nativeDenseTensor3U64

// Tensor3U64 converts a *Dense into a  [][][]uint64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3U64(t *tensor.Dense) (retVal [][][]uint64, err error)

//go:linkname  VectorF32 gorgonia.org/tensor.nativeDenseVectorF32

// VectorF32 converts a *Dense into a []float32
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorF32(t *tensor.Dense) (retVal []float32, err error)

//go:linkname MatrixF32 gorgonia.org/tensor.nativeDenseMatrixF32

// MatrixF32 converts a  *Dense into a [][]float32
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixF32(t *tensor.Dense) (retVal [][]float32, err error)

//go:linkname Tensor3F32 gorgonia.org/tensor.nativeDenseTensor3F32

// Tensor3F32 converts a *Dense into a  [][][]float32.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3F32(t *tensor.Dense) (retVal [][][]float32, err error)

//go:linkname  VectorF64 gorgonia.org/tensor.nativeDenseVectorF64

// VectorF64 converts a *Dense into a []float64
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorF64(t *tensor.Dense) (retVal []float64, err error)

//go:linkname MatrixF64 gorgonia.org/tensor.nativeDenseMatrixF64

// MatrixF64 converts a  *Dense into a [][]float64
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixF64(t *tensor.Dense) (retVal [][]float64, err error)

//go:linkname Tensor3F64 gorgonia.org/tensor.nativeDenseTensor3F64

// Tensor3F64 converts a *Dense into a  [][][]float64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3F64(t *tensor.Dense) (retVal [][][]float64, err error)

//go:linkname  VectorC64 gorgonia.org/tensor.nativeDenseVectorC64

// VectorC64 converts a *Dense into a []complex64
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorC64(t *tensor.Dense) (retVal []complex64, err error)

//go:linkname MatrixC64 gorgonia.org/tensor.nativeDenseMatrixC64

// MatrixC64 converts a  *Dense into a [][]complex64
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixC64(t *tensor.Dense) (retVal [][]complex64, err error)

//go:linkname Tensor3C64 gorgonia.org/tensor.nativeDenseTensor3C64

// Tensor3C64 converts a *Dense into a  [][][]complex64.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3C64(t *tensor.Dense) (retVal [][][]complex64, err error)

//go:linkname  VectorC128 gorgonia.org/tensor.nativeDenseVectorC128

// VectorC128 converts a *Dense into a []complex128
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorC128(t *tensor.Dense) (retVal []complex128, err error)

//go:linkname MatrixC128 gorgonia.org/tensor.nativeDenseMatrixC128

// MatrixC128 converts a  *Dense into a [][]complex128
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixC128(t *tensor.Dense) (retVal [][]complex128, err error)

//go:linkname Tensor3C128 gorgonia.org/tensor.nativeDenseTensor3C128

// Tensor3C128 converts a *Dense into a  [][][]complex128.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3C128(t *tensor.Dense) (retVal [][][]complex128, err error)

//go:linkname  VectorStr gorgonia.org/tensor.nativeDenseVectorStr

// VectorStr converts a *Dense into a []string
// If the *Dense does not represent a vector of the wanted type, it will return
// an error.
func VectorStr(t *tensor.Dense) (retVal []string, err error)

//go:linkname MatrixStr gorgonia.org/tensor.nativeDenseMatrixStr

// MatrixStr converts a  *Dense into a [][]string
// If the *Dense does not represent a matrix of the wanted type, it
// will return an error.
func MatrixStr(t *tensor.Dense) (retVal [][]string, err error)

//go:linkname Tensor3Str gorgonia.org/tensor.nativeDenseTensor3Str

// Tensor3Str converts a *Dense into a  [][][]string.
// If the *Dense does not represent a 3-tensor of the wanted type, it will return an error.
func Tensor3Str(t *tensor.Dense) (retVal [][][]string, err error)
