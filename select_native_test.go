package tensor

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// Code generated by genlib2. DO NOT EDIT.

func TestnativeSelectB(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]bool
	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectB(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectB(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3))
	if x, err = nativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Bool), WithShape(2, 3))
	if x, err = nativeSelectB(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(false))
	if x, err = nativeSelectB(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectB(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectI(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int
	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int), WithShape(2, 3))
	if x, err = nativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int), WithShape(2, 3))
	if x, err = nativeSelectI(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int(0)))
	if x, err = nativeSelectI(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectI(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectI8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int8
	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI8(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3))
	if x, err = nativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int8), WithShape(2, 3))
	if x, err = nativeSelectI8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int8(0)))
	if x, err = nativeSelectI8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectI8(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectI16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int16
	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI16(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3))
	if x, err = nativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int16), WithShape(2, 3))
	if x, err = nativeSelectI16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int16(0)))
	if x, err = nativeSelectI16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectI16(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectI32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int32
	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3))
	if x, err = nativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int32), WithShape(2, 3))
	if x, err = nativeSelectI32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int32(0)))
	if x, err = nativeSelectI32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectI32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectI64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]int64
	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectI64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3))
	if x, err = nativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Int64), WithShape(2, 3))
	if x, err = nativeSelectI64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(int64(0)))
	if x, err = nativeSelectI64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectI64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectU(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint
	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3))
	if x, err = nativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint), WithShape(2, 3))
	if x, err = nativeSelectU(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint(0)))
	if x, err = nativeSelectU(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectU(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectU8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint8
	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU8(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3))
	if x, err = nativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint8), WithShape(2, 3))
	if x, err = nativeSelectU8(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint8(0)))
	if x, err = nativeSelectU8(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectU8(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectU16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint16
	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU16(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3))
	if x, err = nativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint16), WithShape(2, 3))
	if x, err = nativeSelectU16(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint16(0)))
	if x, err = nativeSelectU16(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectU16(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectU32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint32
	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3))
	if x, err = nativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint32), WithShape(2, 3))
	if x, err = nativeSelectU32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint32(0)))
	if x, err = nativeSelectU32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectU32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectU64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]uint64
	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectU64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3))
	if x, err = nativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Uint64), WithShape(2, 3))
	if x, err = nativeSelectU64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(uint64(0)))
	if x, err = nativeSelectU64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectU64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectF32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]float32
	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF32(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3))
	if x, err = nativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Float32), WithShape(2, 3))
	if x, err = nativeSelectF32(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(float32(0)))
	if x, err = nativeSelectF32(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectF32(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectF64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]float64
	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectF64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3))
	if x, err = nativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Float64), WithShape(2, 3))
	if x, err = nativeSelectF64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(float64(0)))
	if x, err = nativeSelectF64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectF64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectC64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]complex64
	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC64(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3))
	if x, err = nativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Complex64), WithShape(2, 3))
	if x, err = nativeSelectC64(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(complex64(0)))
	if x, err = nativeSelectC64(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectC64(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectC128(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]complex128
	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC128(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectC128(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3))
	if x, err = nativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(Complex128), WithShape(2, 3))
	if x, err = nativeSelectC128(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(complex128(0)))
	if x, err = nativeSelectC128(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectC128(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}

func TestnativeSelectStr(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	var err error
	var x [][]string
	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectStr(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(20, len(x[0]))

	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(60, len(x[0]))

	T = New(Of(String), WithShape(2, 3, 4, 5))
	if x, err = nativeSelectStr(T, 3); err != nil {
		t.Fatal(err)
	}
	assert.Equal(120, len(x))
	assert.Equal(1, len(x[0]))

	T = New(Of(String), WithShape(2, 3))
	if x, err = nativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(2, len(x))
	assert.Equal(3, len(x[0]))

	T = New(Of(String), WithShape(2, 3))
	if x, err = nativeSelectStr(T, 1); err != nil {
		t.Fatal(err)
	}
	assert.Equal(6, len(x))
	assert.Equal(1, len(x[0]))

	T = New(FromScalar(""))
	if x, err = nativeSelectStr(T, 0); err != nil {
		t.Fatal(err)
	}
	assert.Equal(1, len(x))
	assert.Equal(1, len(x[0]))

	if _, err = nativeSelectStr(T, 10); err == nil {
		t.Fatal("Expected errors")
	}
}
