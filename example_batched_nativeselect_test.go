package tensor

import (
	"fmt"
	"log"
)

func ExampleBatchedNativeSelectF64() {
	T := New(WithShape(50, 5), WithBacking(Range(Float64, 1, 251)))

	// now let's iterate this using a lazy native select, selecting 10 rows at time

	fmt.Println("Batchsize of 10")
	it := BatchSelectF64(T, 0, 10)
	var batchNo int
	for cur, hasRem := it.Start(); hasRem; cur, hasRem = it.Next() {
		fmt.Printf("%d: %v\n", batchNo, cur)
		batchNo++
	}
	fmt.Printf("Is Truncated? %t\n", it.IsTruncated())

	log.Printf("XXX")
	fmt.Println("Reusing the same iterator for another loop")
	batchNo = 0
	for cur, hasRem := it.Start(); hasRem; cur, hasRem = it.Next() {
		fmt.Printf("%d: %v\n", batchNo, cur)
		batchNo++
	}

	fmt.Println("Batchsize of 3")
	it = BatchSelectF64(T, 0, 3)
	batchNo = 0
	for cur, hasRem := it.Start(); hasRem; cur, hasRem = it.Next() {
		fmt.Printf("%d: %v\n", batchNo, cur)
		batchNo++
	}
	fmt.Printf("Is Truncated? %t\n", it.IsTruncated())

	// Output:
	// Batchsize of 10
	// 0: [[1 2 3 4 5] [6 7 8 9 10] [11 12 13 14 15] [16 17 18 19 20] [21 22 23 24 25] [26 27 28 29 30] [31 32 33 34 35] [36 37 38 39 40] [41 42 43 44 45] [46 47 48 49 50]]
	// 1: [[51 52 53 54 55] [56 57 58 59 60] [61 62 63 64 65] [66 67 68 69 70] [71 72 73 74 75] [76 77 78 79 80] [81 82 83 84 85] [86 87 88 89 90] [91 92 93 94 95] [96 97 98 99 100]]
	// 2: [[101 102 103 104 105] [106 107 108 109 110] [111 112 113 114 115] [116 117 118 119 120] [121 122 123 124 125] [126 127 128 129 130] [131 132 133 134 135] [136 137 138 139 140] [141 142 143 144 145] [146 147 148 149 150]]
	// 3: [[151 152 153 154 155] [156 157 158 159 160] [161 162 163 164 165] [166 167 168 169 170] [171 172 173 174 175] [176 177 178 179 180] [181 182 183 184 185] [186 187 188 189 190] [191 192 193 194 195] [196 197 198 199 200]]
	// 4: [[201 202 203 204 205] [206 207 208 209 210] [211 212 213 214 215] [216 217 218 219 220] [221 222 223 224 225] [226 227 228 229 230] [231 232 233 234 235] [236 237 238 239 240] [241 242 243 244 245] [246 247 248 249 250]]
	// Is Truncated? false
	// Reusing the same iterator for another loop
	// 0: [[1 2 3 4 5] [6 7 8 9 10] [11 12 13 14 15] [16 17 18 19 20] [21 22 23 24 25] [26 27 28 29 30] [31 32 33 34 35] [36 37 38 39 40] [41 42 43 44 45] [46 47 48 49 50]]
	// 1: [[51 52 53 54 55] [56 57 58 59 60] [61 62 63 64 65] [66 67 68 69 70] [71 72 73 74 75] [76 77 78 79 80] [81 82 83 84 85] [86 87 88 89 90] [91 92 93 94 95] [96 97 98 99 100]]
	// 2: [[101 102 103 104 105] [106 107 108 109 110] [111 112 113 114 115] [116 117 118 119 120] [121 122 123 124 125] [126 127 128 129 130] [131 132 133 134 135] [136 137 138 139 140] [141 142 143 144 145] [146 147 148 149 150]]
	// 3: [[151 152 153 154 155] [156 157 158 159 160] [161 162 163 164 165] [166 167 168 169 170] [171 172 173 174 175] [176 177 178 179 180] [181 182 183 184 185] [186 187 188 189 190] [191 192 193 194 195] [196 197 198 199 200]]
	// 4: [[201 202 203 204 205] [206 207 208 209 210] [211 212 213 214 215] [216 217 218 219 220] [221 222 223 224 225] [226 227 228 229 230] [231 232 233 234 235] [236 237 238 239 240] [241 242 243 244 245] [246 247 248 249 250]]
	// Batchsize of 3
	// 0: [[1 2 3 4 5] [6 7 8 9 10] [11 12 13 14 15]]
	// 1: [[16 17 18 19 20] [21 22 23 24 25] [26 27 28 29 30]]
	// 2: [[31 32 33 34 35] [36 37 38 39 40] [41 42 43 44 45]]
	// 3: [[46 47 48 49 50] [51 52 53 54 55] [56 57 58 59 60]]
	// 4: [[61 62 63 64 65] [66 67 68 69 70] [71 72 73 74 75]]
	// 5: [[76 77 78 79 80] [81 82 83 84 85] [86 87 88 89 90]]
	// 6: [[91 92 93 94 95] [96 97 98 99 100] [101 102 103 104 105]]
	// 7: [[106 107 108 109 110] [111 112 113 114 115] [116 117 118 119 120]]
	// 8: [[121 122 123 124 125] [126 127 128 129 130] [131 132 133 134 135]]
	// 9: [[136 137 138 139 140] [141 142 143 144 145] [146 147 148 149 150]]
	// 10: [[151 152 153 154 155] [156 157 158 159 160] [161 162 163 164 165]]
	// 11: [[166 167 168 169 170] [171 172 173 174 175] [176 177 178 179 180]]
	// 12: [[181 182 183 184 185] [186 187 188 189 190] [191 192 193 194 195]]
	// 13: [[196 197 198 199 200] [201 202 203 204 205] [206 207 208 209 210]]
	// 14: [[211 212 213 214 215] [216 217 218 219 220] [221 222 223 224 225]]
	// 15: [[226 227 228 229 230] [231 232 233 234 235] [236 237 238 239 240]]
	// 16: [[241 242 243 244 245] [246 247 248 249 250]]
	// Is Truncated? true

}

func ExampleIterSelect() {
	T := New(WithShape(20, 5), WithBacking(Range(Float64, 1, 101)))
	it := NewIterSelect(T, 0)
	data := T.Float64s()
	var rowNo int
	for start, end, hasRem := it.Start(); hasRem; start, end, hasRem = it.Next() {
		sl := data[start:end]
		fmt.Printf("%d: %v\n", rowNo, sl)
		rowNo++
	}

	// Output:
	// 0: [1 2 3 4 5]
	// 1: [6 7 8 9 10]
	// 2: [11 12 13 14 15]
	// 3: [16 17 18 19 20]
	// 4: [21 22 23 24 25]
	// 5: [26 27 28 29 30]
	// 6: [31 32 33 34 35]
	// 7: [36 37 38 39 40]
	// 8: [41 42 43 44 45]
	// 9: [46 47 48 49 50]
	// 10: [51 52 53 54 55]
	// 11: [56 57 58 59 60]
	// 12: [61 62 63 64 65]
	// 13: [66 67 68 69 70]
	// 14: [71 72 73 74 75]
	// 15: [76 77 78 79 80]
	// 16: [81 82 83 84 85]
	// 17: [86 87 88 89 90]
	// 18: [91 92 93 94 95]
	// 19: [96 97 98 99 100]

}
