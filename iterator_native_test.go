package tensor

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// Code generated by genlib2. DO NOT EDIT.

func Test_nativeDenseVectorB(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(Bool), WithShape(6))
	it, err := nativeDenseVectorB(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixB(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(Bool), WithShape(2, 3))
	it, err := nativeDenseMatrixB(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3B(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(Bool), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3B(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorI(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorI(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixI(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixI(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3I(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3I(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorI8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int8, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorI8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixI8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int8, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixI8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3I8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int8, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3I8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorI16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int16, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorI16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixI16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int16, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixI16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3I16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int16, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3I16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorI32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int32, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorI32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixI32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int32, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixI32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3I32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int32, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3I32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorI64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int64, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorI64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixI64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int64, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixI64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3I64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Int64, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3I64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorU(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorU(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixU(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixU(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3U(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3U(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorU8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint8, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorU8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixU8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint8, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixU8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3U8(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint8, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3U8(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorU16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint16, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorU16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixU16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint16, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixU16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3U16(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint16, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3U16(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorU32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint32, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorU32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixU32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint32, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixU32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3U32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint32, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3U32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorU64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint64, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorU64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixU64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint64, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixU64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3U64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Uint64, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3U64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorF32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float32, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorF32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixF32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float32, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixF32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3F32(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float32, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3F32(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorF64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float64, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorF64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixF64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float64, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixF64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3F64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Float64, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3F64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorC64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex64, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorC64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixC64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex64, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixC64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3C64(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex64, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3C64(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorC128(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex128, 0, 6)), WithShape(6))
	it, err := nativeDenseVectorC128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixC128(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex128, 0, 6)), WithShape(2, 3))
	it, err := nativeDenseMatrixC128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3C128(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(WithBacking(Range(Complex128, 0, 24)), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3C128(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}

func Test_nativeDenseVectorStr(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(String), WithShape(6))
	it, err := nativeDenseVectorStr(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(6, len(it))
}

func Test_nativeDenseMatrixStr(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(String), WithShape(2, 3))
	it, err := nativeDenseMatrixStr(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
}

func Test_nativeDenseTensor3Str(t *testing.T) {
	assert := assert.New(t)
	var T *Dense
	T = New(Of(String), WithShape(2, 3, 4))
	it, err := nativeDenseTensor3Str(T)
	if err != nil {
		t.Fatal(err)
	}

	assert.Equal(2, len(it))
	assert.Equal(3, len(it[0]))
	assert.Equal(4, len(it[0][0]))
}
